#!/usr/bin/env bash
# source this file in your ~/.bashrc or anywhere you need the shims

# ls.exe will be in the PATH for git-shell
if ! type ls.exe > /dev/null 2>&1;then
    exit 0;
fi

function canonical_path()
{
    local path="$1" ; shift
    if [ -d "$path" ]
    then
        echo "$(cd "$path" ; pwd)"
    else
        local b=$(basename "$path")
        local p=$(dirname "$path")
        echo "$(cd "$p" ; pwd)/$b"
    fi
}

function easy_link()
{
    local soft=false
    local force=false
    local quiet=true

    if [[ -z "$1" ]] || [[ "$1" = '--help' ]]; then
        echo "Usage: $0 [options] <link_target> <link_destination>" 1>&2
        cat 1>&2 <<HELP

    This is a shortcut for a simple ln -s operation.

    Relative paths and expansions are supported.

    TODO mysysgit support
HELP
        return 0;
    fi

    # rest of the args
    while getopts "sfv" flag; do
        case "$flag" in
            v) quiet=false;;
            s) soft=true;;
            f) force=true;;
            \?) echo "Unsupported shim ln option '-$OPTARG'" >&2;;
        esac
    done

    [[ "$soft" = false ]] && echo "Only soft linking '-s' option is supported with shim" >&2 && return 1;

    shift $(($OPTIND - 1))

    local target="$1"
    local link_dest="$2"


    [[ -z "$target" ]] && echo "Target: '$target' was not provided" 1>&2 && return 1;
    [[ -z "$link_dest" ]] && echo "Link Destination: '$link_dest' was not provided" 1>&2 && return 1;

    [[ ! -e "$target" ]] && echo "Target: '$target' was not found, can't make link" 1>&2 && return 1;

    # if readlink is not available, use a platform agnostic path function
    local cmd="readlink -f"
    type readlink >/dev/null 2>&1 || cmd="canonical_path"

    local target_path="$("$cmd" "$target")"
    local link_dest_path="$("$cmd" "$link_dest")"

    # force removes the link destination
    if [[ -e $link_dest_path ]]; then
        if [[ "$force" = true ]]; then
            rm -rf "$link_dest_path"
        else
            echo -n "ln: replace '$link_dest_path'? "
            read decide
            decide="$(echo "$decide" | tr '[:upper:]' '[:lower:]')"

            if [[ "$decide" = 'y' ]] || [[ "$decide" = 'yes' ]]; then
                rm -rf "$link_dest_path"
            else
                return 0
            fi
        fi
    fi

    local dir_link_option=""
    [[ -d "$target_path" ]] && dir_link_option="/D "

    local dos_target_path="$(echo $target_path | sed 's/^\///' | sed 's/\//\\/g' | sed 's/^./\0:/')"
    local dos_link_dest_path="$(echo $link_dest_path | sed 's/^\///' | sed 's/\//\\/g' | sed 's/^./\0:/')"

    local mklink="mklink $dir_link_option$dos_link_dest_path $dos_target_path"
    if [[ "$quiet" = true ]]
    then
        echo $mklink | cmd /C > /dev/null
    else
        echo $mklink | cmd /C
    fi

    ### Validate
    if [[ ! -e "$link_dest_path" ]]
    then
        echo "Link was not created, something is wrong"
    fi
}

easy_link "$@"
